(in-package :autoCLaracterization)

(5am:def-suite :defrecgeneric :in :autoCLaracterization)

(5am:in-suite :defrecgeneric)

(defvar *tracker* nil)

(defvar *superstandard-test-forms*
  '((defgeneric superstandard-test (x)
      (:method-combination superstandard))
    (defmethod superstandard-test ((x number))
      (push `(:primary :number) *tracker*))
    (defmethod superstandard-test ((x rational))
      (call-next-method)
      (push `(:primary :rational) *tracker*))
    (defmethod superstandard-test ((x integer))
      (call-next-method)
      (push `(:primary :integer) *tracker*))
    (defmethod superstandard-test :before ((x number))
      (push `(:before :number) *tracker*))
    (defmethod superstandard-test :before ((x rational))
      (push `(:before :rational) *tracker*))
    (defmethod superstandard-test :before ((x integer))
      (push `(:before :integer) *tracker*))
    (defmethod superstandard-test :after ((x number))
      (push `(:after :number) *tracker*))
    (defmethod superstandard-test :after ((x rational))
      (push `(:after :rational) *tracker*))
    (defmethod superstandard-test :after ((x integer))
      (push `(:after :integer) *tracker*))
    (defmethod superstandard-test :around ((x number))
      (call-next-method)
      (push `(:around :number) *tracker*))
    (defmethod superstandard-test :around ((x rational))
      (call-next-method)
      (push `(:around :rational) *tracker*))
    (defmethod superstandard-test :around ((x integer))
      (call-next-method)
      (push `(:around :integer) *tracker*))
    (defmethod superstandard-test :superaround (x)
      (call-next-method)
      (push `(:superaround t) *tracker*))))

(5am:test :superstandard-method-combination
  ;; Observe that, from most specific to least specific:
  ;; integer -> rational -> real -> number -> t
  (let ((*tracker* nil))
    (remove-generic 'superstandard-test)
    (dolist (form *superstandard-test-forms*)
      (eval form))
    (superstandard-test 5)
    (5am:is (equal
             '((:superaround t)
               (:around :integer) (:around :rational) (:around :number)
               (:after :integer) (:after :rational) (:after :number)
               (:primary :integer) (:primary :rational) (:primary :number)
               (:before :number) (:before :rational) (:before :integer))
             *tracker*))
    (eval '(defmethod superstandard-test :superaround ((x number))
             (call-next-method)
             (push `(:superaround :number) *tracker*)))
    (handler-case
        (progn
          (superstandard-test 5)
          (5am:fail "Failed to error out SUPERSTANDARD-TEST call despite multiple :superaround methods present."))
      (multiple-superarounds-error ()
        (5am:pass "Correctly errored out in presence of multiple :superarounds")))))
